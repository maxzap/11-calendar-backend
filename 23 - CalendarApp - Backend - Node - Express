¿Qué veremos en esta sección?

Node

Express

Mongoose

Modelos

Controllers

Middlewares de Express

JWT

Autenticación pasiva

Payloas

Encriptación

Rutas

CORS

Revalidar tokens

MongoDB

MongoAtlas

MongoCompass

Es una sección bastante pesada en el aspecto de que no es React lo que veremos, pero todo lo haremos con JavaScript, y ya debemos de estar familiarizados con él.

El backend que haremos aquí es robusto y lo podrían utilizar en proyectos reales, espero que lo aprovechen y sobre todo aprendan bastante.

Si quieren saber más sobre Node, recuerden que tengo un curso especializado en ese tema.

1 - Inicio del proyecto CalendarioApp Node Backend
		crea el package.json con toda la configuración por defectgo.
			--> npm init -Y

		para ejecutar un programa en node se declara el archivo de entrada junto con el comando
			--> node index.js
		para evitar que tener que hacer esta tarea repetitva vamosa instalar un paquete que realiza esta tarea de manera automatica cada que vez que detecta un cambio en algun archivo.
			-->sudo npm i nodemon -g
		Una vez instalado nodemon podremos configurar un comando para lanzarlo directamente desde consola.
			--> npm run dev

2 - Configurando Express
		necesitamos express para crear un servidor que tenga todos los endpoints y que me ayude para crear mi server.
		--> npm i express

3 - Variables de entorno y carpeta publica.
		La carpeta publica en el cual se subira un sitio web que eventualmente sera la app de react.

		Crear variables de entorno.
		Paquete para manejar variables de entorno.
			->> npm i dotenv

		app.use() <-- Es conocido como un middleware, un middleware no es mas que una funcion que se ejecuta como respuesta a una petición.

4 - Creando las rutas relacionadas a usuarios.
		Creamos el directorio routes y el archivo auth que va a contener las rutas de login, registro y renew del token.

5 - Endpoints de renovar, crear y login.
		Retiramos la logica de las rutas y las colocamos en funciones dentro del directorio controller.

6 - Recuperar información de un posteo.
		http status code response:
		--> https://www.restapitutorial.com/httpstatuscodes.html

7 - Express Validator.
		Hay millones de paquetes que resuelven necesidades.
		Ya existen paquetes para hacer validaciones en express.

		Uno es el express validator que dispone varios middleware (Recordar que un middleware es simplemente una funcion que se va a ejecutar antes de una cosa).
		--> npm i express-validator

		Usame check del paquete de express validator para validar los campos enviados en el request.

8 - Custom middleware.
		No es mas que un funcion que quiero colocar dentro de un CHECK o validación de Express.

9 - Configuración de BD.
		Mongo Atlas es el servicio de MONGODB en la nube.
		Te permite tener una bd lista y funcional en la nube en segundos.
			--> https://www.mongodb.com/cloud/atlas/efficiency?utm_source=google&utm_campaign=gs_americas_canada_search_brand_atlas_desktop&utm_term=mongo%20atlas&utm_medium=cpc_paid_search&utm_ad=e&gclid=Cj0KCQjwiYL3BRDVARIsAF9E4GfQWQYG_pbTlJA5eixJKM75IaFYqk4nUBlKe0iXkKn4kXc1HZmKSikaAtKzEALw_wcB

		Mongoose te facilita la vida cuando tenes que trabajar con MongoDB
		Es un ODM (Object Data Manager).
			--> https://mongoosejs.com/
			--> npm i mongoose


		db user = dbadmin
		password = r176tspc4XAGtR6g


10 - Conectar Node a Mongo Atlas.
		Las variables de entornos sensibles podrian crearse en heroku como variables de entornos, para los casos en donde despleguemos en backends de terceros.

11 - Registracion de usuarios (persistir en la BD).
		Las collecciones se persisten en pĺurar gracias a Mongoose, existe una configuracion que crear las colecciones de los modelos en plurar de manera automatica. De todos se puede modificar esta configuracion de Mongoose.

12 - Validaciones de usuarios.
		Utilizamos mongoose para buscar un registro puntual en mongo basandome por uno de los atributos del modelo.

13 - Encriptar una contraseña.

		Vamos a encriptar la contraseña antes de que persistirla.
		El motodo de encriptación va a ser de un hash de una sola via.

		Vamos a utilizar una libreria de terceros para encriptar.
			--> npm i bcryptjs

14 - Login de usuario.
		Comparamos la contraseñas enviada en el login con la que se encuentra en la bd utilizando bcrypt.

15 - Generar un JWT.
		--> https://jwt.io/

		libreria para trabajar con JWT.
		--> npm i jsonwebtoken

16 - Revalidar JWT.
		Es un standard que los token personalizados se definan con una 'x-' en el nombre.
		Creamos un nuevo middleware para gestionar la validacion del token recibido en el request.

17 - Configurar CORS.
		Con CORS podemos configurar las restricciones hacia los consumidores que queramos.

		--> https://www.npmjs.com/package/cors
		--> enable-cors.org
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------

SECCIÓN 24

CRUD completo de eventos de calendario

Modelos

Validaciones automáticas

Validaciones personalizadas

Aquí trabajaremos creando todo lo necesario para que podamos insertar,
actualiza y eliminar información relacionada a los eventos que nuestra aplicación del calendario necesitará.

------------------------------------------------------------------------------------------------------------
18 - Continuar el proyecto - Calendar Backend
19 - Resolución de la tarea - CRUD
		Correcciones: 
			Especificar las rutas para saber que urls llamar.
			Utilizar el router.use( _funcion_middleware_ ) para simplifcar el uso de middleware reiterados.

20 - Modelo de evento.
		Configuracion minima necesaria para crear la conexion a la BD y tener una estructura de datos.
		Provamos por primera vez la creación de un evento.

21 - Validar campos necesarios.
		Necesito validar que la información se encuentre y no desperdiciar recurso.
		Usamos Check para la validación de los campos, que no es mas que una colección de middlewares.
		

		Instalamos moment para realizar la validación de las fechas.
		--> npm i moment


22 - Grabar un evento en BD.
		Utilizamos el modelo de Mongooze para persistir el evento.
		
		Antes de guardar el Evento seteamos el id del User (ya que esta marcado como required) y lo obtenmos del request, que tiene el token y a su vez el token tiene los datos del usuario.

		Vamos a customizar la manera en que la serialización persiste los datos en BD.

		REVISAR: fix al momento de la creación del usuario, no devuelve el UID;

23 - Obtener el listado de eventos.
		".populate" permite filtrar la respuesta.

24 - Actualizar un evento.

25 - Eliminar eventos.


------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
SECCIÓN 25
Despliegues de Node hacia Heroku

Git

Generar nuestra aplicación de React para producción

Revisar LOGS de Heroku

Es una sección corta pero enfocada en que puedan desplegar todo su trabajo en un hosting que les permita compartir todo su trabajo a cualquier persona y usar su aplicación en cualquier lugar del mundo.


------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------

1 - SingIn en Heroku.
		Hosting para desplegar app productivas, tiene un free tier de 5 applicaciones.
		--> https://www.heroku.com/

2 - Desplegar la applicacion en heroku.
		Install the Heroku CLI
		Download and install the Heroku CLI.
			--> https://devcenter.heroku.com/articles/heroku-cli
		
		Comando para instalar heroku cli en ubuntu.
		--> curl https://cli-assets.heroku.com/install-ubuntu.sh | sh